<?xml version="1.0"?>
<project name="dotNetRDF" default="build-nightly" basedir="../../">
  <description>dotNetRDF NAnt Builds</description>
  
  <!-- Disable Building and Compiling Options -->
  <property name="nobuild" value="" />
  <property name="nosign" value="" />
  <property name="nocompile" value="" />
  <property name="nodist" value="" />
  <property name="nosilverlight" value="" />
  <property name="nowindowsphone" value="${nosilverlight}" />
  <property name="noportable" value="${nosilverlight}" />
  <property name="nosymbols" value="true" />
  
  <!-- Set the Compiler Warnings we want to ignore -->
  <property name="nowarn" value="1591;0067" />
  
  <!-- Licensing Properties -->
  <property name="license.exclude.exts" 
            value="dll,pdb,exe,xml,xaml,xsd,dtd,xshd,config,xslt,ttl,rdf,out,rq,trig,trix,ru,nt,n3,nq,srx,owl,srj,json,txt,csv,tsv,csproj,user,template,sln,cache,pfx,sql,resources,resx,properties,settings,html,xhtml,css,js,sparql,bak,ico,png,jpg,tiff,bmp,orig,snk,gz" />
  <property name="license.exclude.regex" value="hg|svn|obj|bin|.nuget" />
  <property name="license.search" value="Copyright \(c\) 20\d{2}-2015 dotNetRDF Project \(dotnetrdf-develop@lists\.sf\.net\)" />
  <property name="license.replace" value="license.txt" />
  <property name="license.overwrite" value="-overwrite" /> <!-- Alternative is -preserve which does not change existing Licenses -->
  
  <!-- Signing Properties -->
  <property name="keyfile" value="${project::get-base-directory()}Build/dotNetRDF.snk" />

  <!-- Version Properties -->
  <!-- When generating ZIP files with the dist targets use the command line -d option to set these appropriately -->
  <property name="version" value="190" /> <!-- Version number used for dotNetRDF Library release ZIPs -->
  <property name="releasetype" value="alpha" /> <!-- Version descriptor used for dotNetRDF Library release ZIPs -->
  <property name="toolsversion" value="190" /> <!-- Version number used for dotNetRDF Toolkit release ZIPs -->
  <property name="toolsreleasetype" value="alpha" /> <!-- Version descriptor used for dotNetRDF Toolkit release ZIPs -->
  <property name="nuspecversion" value="1.9.0-alpha01" /> <!-- Version number passed to NuGet for packaging -->
  <property name="buildversion" value="1.9.0.0" /> <!-- Version number expected to be set for Assembly versions, used for pre-release validation -->
  
  <!-- Names of ZIP Files generated by dist targets -->
  <property name="libzip" value="dotNetRDF_library_${version}_${releasetype}.zip" />
  <property name="srczip" value="dotNetRDF_library_source_${version}_${releasetype}.zip" />
  <property name="toolkitzip" value="dotNetRDF_tools_${toolsversion}_${toolsreleasetype}.zip" />
  <property name="toolkitinstaller" value="dotNetRDF_tools_${toolsversion}_${toolsreleasetype}_installer.zip" />
  
  <!-- Project Sync Targets which sync some Project Files with others -->
  
  <target name="projectsync" description="Sync project files" unless="${nocompile}"
          depends="projectsync-core,
                   projectsync-io-core,projectsync-io-json" />

  <target name="projectsync-core" description="Sync Core project files" unless="${nocompile}" 
          depends="projectsync-core-clientprofile,
                   projectsync-core-portable">
  </target>

  <target name="projectsync-core-clientprofile" description="Syncs the dotNetRDF Client Profile build project file"  unless="${nocompile}">
    <exec program="Build/SyncProjects/SyncProjects.exe">
      <arg value="sync" />
      <arg value="Libraries/core/net40/dotNetRDF.Core.Net40.csproj" />
      <arg value="Libraries/core/net40-client/dotNetRDF.Core.Net40.ClientProfile.csproj" />
    </exec>
  </target>

  <target name="projectsync-core-portable" unless="${noportable == 'true' or nocompile == 'true'}">
    <exec program="Build/SyncProjects/SyncProjects.exe">
      <arg value="sync" />
      <arg value="Libraries/core/net40/dotNetRDF.Core.Net40.csproj" />
      <arg value="Libraries/core/portable/dotNetRDF.Core.Portable.csproj" />
    </exec>
  </target>

  <target name="projectsync-io-core" description="Sync IO Core project files" unless="${nocompile}"
          depends="projectsync-io-core-clientprofile">
  </target>

  <target name="projectsync-io-core-clientprofile" description="Syncs the dotNetRDF.IO.Core Client Profile build project file"  unless="${nocompile}">
    <exec program="Build/SyncProjects/SyncProjects.exe">
      <arg value="sync" />
      <arg value="Libraries/IO/Core/net40/dotNetRDF.IO.Core.Net40.csproj" />
      <arg value="Libraries/IO/Core/net40-client/dotNetRDF.IO.Core.Net40.ClientProfile.csproj" />
    </exec>
  </target>

  <target name="projectsync-io-json" description="Sync IO JSON project files" unless="${nocompile}"
          depends="projectsync-io-json-clientprofile">
  </target>


  <target name="projectsync-io-json-clientprofile" description="Syncs the dotNetRDF.IO.Json Client Profile build project file"  unless="${nocompile}">
    <exec program="Build/SyncProjects/SyncProjects.exe">
      <arg value="sync" />
      <arg value="Libraries/IO/Json/net40/dotNetRDF.IO.Json.Net40.csproj" />
      <arg value="Libraries/IO/Json/net40-client/dotNetRDF.IO.Json.Net40.ClientProfile.csproj" />
    </exec>
  </target>

  <!--
  <target name="projectsync-sparql-core" description="Sync SPARQL Core project files" unless="${nocompile}"
          depends="projectsync-sparql-core-net35,
                   projectsync-sparql-core-clientprofile,
                   projectsync-sparql-core-clientprofile-net35">
  </target>

  <target name="projectsync-sparql-core-clientprofile" description="Syncs the dotNetRDF.Sparql.Core Client Profile build project file"  unless="${nocompile}">
    <exec program="Build/SyncProjects/SyncProjects.exe">
      <arg value="sync" />
      <arg value="Libraries/Sparql/Core/net40/dotNetRDF.Sparql.Core.csproj" />
      <arg value="Libraries/Sparql/Core/net40-client/dotNetRDF.Sparql.Core.ClientProfile.csproj" />
    </exec>
  </target>
-->


  <!-- License Targets which enforce License headers on the code -->

  <target name="license" description="Applies License headers to all targets"
          depends="license-libs,license-tests" 
          unless="${nocompile}" />

  <target name="license-libs" description="Applies License headers to all library targets"
          depends="license-core,
                   license-io-core,license-io-json,
                   license-sparql-core" 
          unless="${nocompile}" />

  <target name="license-tests" description="Applies License headers to all test targets"
          depends="license-libs,
                   license-unit-tests,
                   license-dawg-tests" 
          unless="${nocompile}" />

  <target name="license-core" description="Applies License headers to the Core Library" unless="${nocompile}">
    <exec program="Build/LicenseChecker/LicenseChecker.exe" failonerror="true">
      <arg value="-directory" />
      <arg value="Libraries/core/net40/" />
      <arg value="-exclude-exts" />
      <arg value="${license.exclude.exts}" />
      <arg value="-exclude" />
      <arg value="${license.exclude.regex}" />
      <arg value="-license-search" />
      <arg value="${license.search}" />
      <arg value="-license-file" />
      <arg value="${license.replace}" />
      <arg value="-fix" />
      <arg value="${license.overwrite}" />
    </exec>
  </target>

  <target name="license-core-portable" description="Applies License headers to the Core Library" unless="${nocompile}">
    <exec program="Build/LicenseChecker/LicenseChecker.exe" failonerror="true">
      <arg value="-directory" />
      <arg value="Libraries/core/portable/" />
      <arg value="-exclude-exts" />
      <arg value="${license.exclude.exts}" />
      <arg value="-license-search" />
      <arg value="${license.search}" />
      <arg value="-license-file" />
      <arg value="${license.replace}" />
      <arg value="-fix" />
      <arg value="${license.overwrite}" />
      <!-- Since the Portable build includes some 3rd party code under other licenses exclude those folders-->
      <arg value="-exclude" />
      <arg value="(${license.exclude.regex})|Compatibility|Crypto" />
    </exec>
  </target>

  <target name="license-io-core" description="Applies License headers to the IO.Core Library" unless="${nocompile}">
    <exec program="Build/LicenseChecker/LicenseChecker.exe" failonerror="true">
      <arg value="-directory" />
      <arg value="Libraries/IO/Core/net40/" />
      <arg value="-exclude-exts" />
      <arg value="${license.exclude.exts}" />
      <arg value="-exclude" />
      <arg value="${license.exclude.regex}" />
      <arg value="-license-search" />
      <arg value="${license.search}" />
      <arg value="-license-file" />
      <arg value="${license.replace}" />
      <arg value="-fix" />
      <arg value="${license.overwrite}" />
    </exec>
  </target>

  <target name="license-io-json" description="Applies License headers to the IO.Json Library" unless="${nocompile}">
    <exec program="Build/LicenseChecker/LicenseChecker.exe" failonerror="true">
      <arg value="-directory" />
      <arg value="Libraries/IO/Json/net40/" />
      <arg value="-exclude-exts" />
      <arg value="${license.exclude.exts}" />
      <arg value="-exclude" />
      <arg value="${license.exclude.regex}" />
      <arg value="-license-search" />
      <arg value="${license.search}" />
      <arg value="-license-file" />
      <arg value="${license.replace}" />
      <arg value="-fix" />
      <arg value="${license.overwrite}" />
    </exec>
  </target>

  <target name="license-sparql-core" description="Applies License headers to the Sparql.Core Library" unless="${nocompile}">
    <exec program="Build/LicenseChecker/LicenseChecker.exe" failonerror="true">
      <arg value="-directory" />
      <arg value="Libraries/Sparql/Core/net40/" />
      <arg value="-exclude-exts" />
      <arg value="${license.exclude.exts}" />
      <arg value="-exclude" />
      <arg value="${license.exclude.regex}" />
      <arg value="-license-search" />
      <arg value="${license.search}" />
      <arg value="-license-file" />
      <arg value="${license.replace}" />
      <arg value="-fix" />
      <arg value="${license.overwrite}" />
    </exec>
  </target>

  <target name="license-unit-tests" description="Applies License headers to the Unit Tests libraries"
          depends="license-core-unit-tests,
                   license-io-core-unit-tests, license-io-json-unit-tests"
          unless="${nocompile}">

  </target>

  <target name="license-core-unit-tests" description="Applies License headers to the Core Unit Test libraries" depends="license-core" unless="${nocompile}">
    <exec program="Build/LicenseChecker/LicenseChecker.exe" failonerror="true">
      <arg value="-directory" />
      <arg value="Testing/Core/net40/" />
      <arg value="-exclude-exts" />
      <arg value="${license.exclude.exts}" />
      <arg value="-exclude" />
      <arg value="${license.exclude.regex}" />
      <arg value="-license-search" />
      <arg value="${license.search}" />
      <arg value="-license-file" />
      <arg value="${license.replace}" />
      <arg value="-fix" />
      <arg value="${license.overwrite}" />
    </exec>
  </target>

  <target name="license-io-core-unit-tests" description="Applies License headers to the IO.Core Unit Test libraries" depends="license-io-core" unless="${nocompile}">
    <exec program="Build/LicenseChecker/LicenseChecker.exe" failonerror="true">
      <arg value="-directory" />
      <arg value="Testing/IO/Core/net40/" />
      <arg value="-exclude-exts" />
      <arg value="${license.exclude.exts}" />
      <arg value="-exclude" />
      <arg value="${license.exclude.regex}" />
      <arg value="-license-search" />
      <arg value="${license.search}" />
      <arg value="-license-file" />
      <arg value="${license.replace}" />
      <arg value="-fix" />
      <arg value="${license.overwrite}" />
    </exec>
  </target>

  <target name="license-io-json-unit-tests" description="Applies License headers to the IO.Json Unit Test libraries" depends="license-io-json" unless="${nocompile}">
    <exec program="Build/LicenseChecker/LicenseChecker.exe" failonerror="true">
      <arg value="-directory" />
      <arg value="Testing/IO/Json/net40/" />
      <arg value="-exclude-exts" />
      <arg value="${license.exclude.exts}" />
      <arg value="-exclude" />
      <arg value="${license.exclude.regex}" />
      <arg value="-license-search" />
      <arg value="${license.search}" />
      <arg value="-license-file" />
      <arg value="${license.replace}" />
      <arg value="-fix" />
      <arg value="${license.overwrite}" />
    </exec>
  </target>

  <target name="license-sparql-core-unit-tests" description="Applies License headers to the Sparql.Core Unit Test libraries" depends="license-sparql-core" unless="${nocompile}">
    <exec program="Build/LicenseChecker/LicenseChecker.exe" failonerror="true">
      <arg value="-directory" />
      <arg value="Testing/Sparql/Core/net40/" />
      <arg value="-exclude-exts" />
      <arg value="${license.exclude.exts}" />
      <arg value="-exclude" />
      <arg value="${license.exclude.regex}" />
      <arg value="-license-search" />
      <arg value="${license.search}" />
      <arg value="-license-file" />
      <arg value="${license.replace}" />
      <arg value="-fix" />
      <arg value="${license.overwrite}" />
    </exec>
  </target>

  <target name="license-dawg-tests" description="Applies License headers to the DAWG Tests project" depends="license-core" unless="${nocompile}">
    <exec program="Build/LicenseChecker/LicenseChecker.exe" failonerror="true">
      <arg value="-directory" />
      <arg value="Testing/sparqlDawgTests/" />
      <arg value="-exclude-exts" />
      <arg value="${license.exclude.exts}" />
      <arg value="-exclude" />
      <arg value="${license.exclude.regex}" />
      <arg value="-license-search" />
      <arg value="${license.search}" />
      <arg value="-license-file" />
      <arg value="${license.replace}" />
      <arg value="-fix" />
      <arg value="${license.overwrite}" />
    </exec>
  </target>

  <!-- Compile Targets which Compile the Code -->

  <target name="no-compile" description="Sets that no compilation should be done">
    <property name="nocompile" value="true" />
  </target>

  <target name="compile" description="Compile dotNetRDF" unless="${nocompile}" 
          depends="compile-libs">
  </target>

  <target name="compile-libs" description="Copiles all libraries for main distribution and toolkit" unless="${nocompile}"
          depends="compile-libs-main">
  </target>

  <target name="compile-libs-main" description="Compiles all the libraries that make up the main distribution" unless="${nocompile}"
          depends="compile-libs-core,
                   compile-libs-io-core,compile-libs-io-json,
                   compile-libs-sparql-core">
  </target>

  <target name="compile-libs-core" description="Compiles all builds of the Core library" unless="${nocompile}"
          depends="compile-core,
                   compile-core-clientprofile" >
    <!--
    Portable build currently does not work
    ,compile-core-portable"> -->
  </target>
 
  <target name="compile-core" description="Compiles just the dotNetRDF Core Library" depends="license-core" unless="${nocompile}">
    <property name="nant.settings.currentframework" value="net-4.0" />
    <property name="msBuild.exe" value="${framework::get-framework-directory(framework::get-target-framework())}\msbuild.exe" />
    <exec program="${msBuild.exe}" failonerror="true" verbose="true">
      <arg value="Libraries/core/net40/dotNetRDF.Core.Net40.csproj" />
      <arg line="/p:Configuration=Debug" />
      <arg line="/p:PostBuildEvent=" />
      <arg line="/p:NoWarn=&quot;${nowarn}&quot;" />
      <arg line="/p:DefineConstants=&quot;DEBUG,NET40,NANT&quot;" />
      <arg line="/Property:SolutionDir=${project::get-base-directory()}" />
    </exec>
  </target>

  <target name="compile-core-clientprofile" description="Compiles the dotNetRDF Client Profile Build" unless="${nocompile}" depends="license-core,projectsync-core-clientprofile">
    <property name="nant.settings.currentframework" value="net-4.0" />
    <property name="msBuild.exe" value="${framework::get-framework-directory(framework::get-target-framework())}\msbuild.exe" />
    <exec program="${msBuild.exe}" failonerror="true">
      <arg value="Libraries/core/net40-client/dotNetRDF.Core.Net40.ClientProfile.csproj" />
      <arg line="/p:Configuration=Debug" />
      <arg line="/p:PostBuildEvent=" />
      <arg line="/p:NoWarn=&quot;${nowarn}&quot;" />
      <arg line="/Property:SolutionDir=${project::get-base-directory()}" />
    </exec>
  </target>

  <target name="compile-core-portable" description="Compiles the dotNetRDF Portable Build" unless="${nocompile}" depends="license-core,projectsync-core-portable">
    <property name="nant.settings.currentframework" value="net-4.0" />
    <property name="msBuild.exe" value="${framework::get-framework-directory(framework::get-target-framework())}\msbuild.exe" />
    <exec program="${msBuild.exe}" failonerror="true">
      <arg value="Libraries/core/portable/dotNetRDF.Core.Portable.csproj" />
      <arg line="/p:Configuration=Debug" />
      <arg line="/p:PostBuildEvent=" />
      <arg line="/p:NoWarn=&quot;${nowarn}&quot;" />
      <arg line="/Property:SolutionDir=${project::get-base-directory()}" />
    </exec>
  </target>

  <target name="compile-libs-io-core" description="Compiles all builds of the IO Core library" unless="${nocompile}"
          depends="compile-io-core,
                   compile-io-core-clientprofile">
  </target>

  <target name="compile-io-core" description="Compiles just the dotnetRDF IO Core Library" depends="license-io-core" unless="${nocompile}">
    <property name="nant.settings.currentframework" value="net-4.0" />
    <property name="msBuild.exe" value="${framework::get-framework-directory(framework::get-target-framework())}\msbuild.exe" />
    <exec program="${msBuild.exe}" failonerror="true" verbose="true">
      <arg value="Libraries/IO/Core/net40/dotNetRDF.IO.Core.Net40.csproj" />
      <arg line="/p:Configuration=Debug" />
      <arg line="/p:PostBuildEvent=" />
      <arg line="/p:NoWarn=&quot;${nowarn}&quot;" />
      <arg line="/p:DefineConstants=&quot;DEBUG,NET40,NANT&quot;" />
      <arg line="/Property:SolutionDir=${project::get-base-directory()}" />
    </exec>
  </target>


  <target name="compile-io-core-clientprofile" description="Compiles the dotnetRDF IO Core Client Profile Build" unless="${nocompile}" depends="license-io-core,projectsync-io-core-clientprofile">
    <property name="nant.settings.currentframework" value="net-4.0" />
    <property name="msBuild.exe" value="${framework::get-framework-directory(framework::get-target-framework())}\msbuild.exe" />
    <exec program="${msBuild.exe}" failonerror="true">
      <arg value="Libraries/IO/Core/net40-client/dotNetRDF.IO.Core.Net40.ClientProfile.csproj" />
      <arg line="/p:Configuration=Debug" />
      <arg line="/p:PostBuildEvent=" />
      <arg line="/p:NoWarn=&quot;${nowarn}&quot;" />
      <arg line="/Property:SolutionDir=${project::get-base-directory()}" />
    </exec>
  </target>
  
    <target name="compile-libs-io-json" description="Compiles all builds of the IO JSON library" unless="${nocompile}"
          depends="compile-io-json,
                   compile-io-json-clientprofile">
  </target>

  <target name="compile-io-json" description="Compiles just the dotnetRDF IO JSON Library" depends="license-io-json" unless="${nocompile}">
    <property name="nant.settings.currentframework" value="net-4.0" />
    <property name="msBuild.exe" value="${framework::get-framework-directory(framework::get-target-framework())}\msbuild.exe" />
    <exec program="${msBuild.exe}" failonerror="true" verbose="true">
      <arg value="Libraries/IO/Json/net40/dotNetRDF.IO.Json.Net40.csproj" />
      <arg line="/p:Configuration=Debug" />
      <arg line="/p:PostBuildEvent=" />
      <arg line="/p:NoWarn=&quot;${nowarn}&quot;" />
      <arg line="/p:DefineConstants=&quot;DEBUG,NET40,NANT&quot;" />
      <arg line="/Property:SolutionDir=${project::get-base-directory()}" />
    </exec>
  </target>

  <target name="compile-io-json-clientprofile" description="Compiles the dotnetRDF IO JSON Client Profile Build" unless="${nocompile}" depends="license-io-json,projectsync-io-json-clientprofile">
    <property name="nant.settings.currentframework" value="net-4.0" />
    <property name="msBuild.exe" value="${framework::get-framework-directory(framework::get-target-framework())}\msbuild.exe" />
    <exec program="${msBuild.exe}" failonerror="true">
      <arg value="Libraries/IO/Json/net40-client/dotNetRDF.IO.Json.Net40.ClientProfile.csproj" />
      <arg line="/p:Configuration=Debug" />
      <arg line="/p:PostBuildEvent=" />
      <arg line="/p:NoWarn=&quot;${nowarn}&quot;" />
      <arg line="/Property:SolutionDir=${project::get-base-directory()}" />
    </exec>
  </target>

  <target name="compile-libs-sparql-core" description="Compiles all builds of the SPARQL Core library" unless="${nocompile}"
        depends="compile-sparql-core">
  </target>

  <target name="compile-sparql-core" description="Compiles just the dotnetRDF SPARQL Core Library" depends="license-sparql-core" unless="${nocompile}">
    <property name="nant.settings.currentframework" value="net-4.0" />
    <property name="msBuild.exe" value="${framework::get-framework-directory(framework::get-target-framework())}\msbuild.exe" />
    <exec program="${msBuild.exe}" failonerror="true" verbose="true">
      <arg value="Libraries/Sparql/Core/net40/dotNetRDF.Sparql.Core.Net40.csproj" />
      <arg line="/p:Configuration=Debug" />
      <arg line="/p:PostBuildEvent=" />
      <arg line="/p:NoWarn=&quot;${nowarn}&quot;" />
      <arg line="/p:DefineConstants=&quot;DEBUG,NET40,NANT&quot;" />
      <arg line="/Property:SolutionDir=${project::get-base-directory()}" />
    </exec>
  </target>

  <!--

  <target name="compile-sparql-core-clientprofile" description="Compiles the dotnetRDF SPARQL Client Profile Build" unless="${nocompile}" depends="license-sparql-core,projectsync-sparql-core-clientprofile">
    <property name="nant.settings.currentframework" value="net-4.0" />
    <property name="msBuild.exe" value="${framework::get-framework-directory(framework::get-target-framework())}\msbuild.exe" />
    <exec program="${msBuild.exe}" failonerror="true">
      <arg value="Libraries/Sparql/Core/net40-client/dotNetRDF.Sparql.Core.Net40.ClientProfile.csproj" />
      <arg line="/p:Configuration=Debug" />
      <arg line="/p:PostBuildEvent=" />
      <arg line="/p:NoWarn=&quot;${nowarn}&quot;" />
      <arg line="/Property:SolutionDir=${project::get-base-directory()}" />
    </exec>
  </target>

  -->

  <!-- Nightly Build Targets -->

  <target name="no-build" description="Sets that no Builds should be performed" depends="no-compile">
    <property name="nobuild" value="true" />
  </target>
  
  <target name="build" description="Builds dotNetRDF" unless="${nobuild}" 
          depends="build-libs">
    
  </target>

  <target name="build-libs" description="Builds dotNetRDF library nightlies" unless="${nobuild}"
          depends="build-core,build-core-clientprofile,
                   build-io-core,build-io-core-clientprofile,
                   build-io-json,build-io-json-clientprofile"/>
  <!-- Portable currently not buildable -->
  <!--,
                   build-core-portable" />-->
  
  <property name="build.classifier" value="Libraries" />
  <property name="build.product" value="Core" />
  <property name="build.target" value="net40" />
  <property name="build.profile" value="Debug" />
  <property name="build.artifacts" value="dotNetRDF.*" />
  <property name="build.dependencies" value="" />

  <target name="build-worker">
    <copy overwrite="true" todir="bin/nightlies/${build.classifier}/${build.product}/${build.target}" flatten="true">
      <fileset failonempty="true">
        <include name="${build.classifier}/${build.product}/${build.target}/bin/${build.profile}/${build.artifacts}" if="${build.artifacts != ''}"/>
        <include name="${build.classifier}/${build.product}/${build.target}/bin/${build.profile}/${build.dependencies}" if="${build.dependencies != ''}" />
      </fileset>
    </copy>
  </target>

  <target name="build-lib-base">
    <property name="build.classifier" value="Libraries" />
    <property name="build.profile" value="Debug" />
    <property name="build.artifacts" value="" />
    <property name="build.dependencies" value="" />
  </target>

  <target name="build-core-base">
    <call target="build-lib-base" />
    <property name="build.target" value="net40" />
    <property name="build.product" value="Core" />
    <property name="build.artifacts" value="dotNetRDF.Core.*" />
    <property name="build.dependencies" value="VDS.Common.dll" />
  </target>

  <target name="build-core" description="Copy the latest build to the Nightly Build directory" unless="${nobuild}"  depends="compile-core">
    <call target="build-core-base" />
    <call target="build-worker" />
  </target>

  <target name="build-core-clientprofile" description="Copy the latest Client Profile build to the Client Profile Nightly Build directory" unless="${nobuild}" depends="compile-core-clientprofile">
    <call target="build-core-base" />
    <property name="build.target" value="net40-client" />
    <call target="build-worker" />
  </target>

  <target name="build-core-portable" description="Copy the latest Portable build to the Portable Nightly Build directory" unless="${nobuild}" depends="compile-core-portable">
    <call target="build-core-base" />
    <property name="build.target" value="portable" />
    <call target="build-worker" />
    <property name="build.artifacts" values="" />
    <property name="build.dependencies" value="Portable.Runtime.dll" />
    <call target="build-worker" />
  </target>

  <target name="build-io-core-base">
    <call target="build-lib-base" />
    <property name="build.product" value="IO/Core" />
    <property name="build.artifacts" value="dotNetRDF.IO.Core.*" />
    <property name="build.target" value="net40" />
  </target>

  <target name="build-io-core" description="Copy the latest build to the Nightly Build directory" unless="${nobuild}"  depends="compile-io-core">
    <call target="build-io-core-base" />
    <call target="build-worker" />
  </target>

  <target name="build-io-core-clientprofile" description="Copy the latest Client Profile build to the Client Profile Nightly Build directory" unless="${nobuild}" depends="compile-io-core-clientprofile">
    <call target="build-io-core-base" />
    <property name="build.target" value="net40-client" />
    <call target="build-worker" />
  </target>

  <target name="build-io-json-base">
    <call target="build-lib-base" />
    <property name="build.target" value="net40" />
    <property name="build.product" value="IO/Json" />
    <property name="build.artifacts" value="dotNetRDF.IO.Json.*" />
    <property name="build.dependencies" value="Newtonsoft.Json.dll" />
  </target>

  <target name="build-io-json" description="Copy the latest build to the Nightly Build directory" unless="${nobuild}"  depends="compile-io-json">
    <call target="build-io-json-base" />
    <call target="build-worker" />
  </target>

  <target name="build-io-json-clientprofile" description="Copy the latest Client Profile build to the Client Profile Nightly Build directory" unless="${nobuild}" depends="compile-io-json-clientprofile">
    <call target="build-io-json-base" />
    <property name="build.target" value="net40-client" />
    <call target="build-worker" />
  </target>

  <!-- Release Build Targets -->

  <target name="validate-release" description="Validates that the release artifacts have the correct version set"
	        depends="validate-release-libs" />

  <target name="validate-release-libs" description="Validates that the libraries to be released have the correct version set">
    <exec program="Build/VersionBumper/VersionBumper.exe" failonerror="true">
      <arg value="-scan" />
      <arg value="Libraries/" />
      <arg value="-validate" />
      <arg value="${buildversion}" />
    </exec>
  </target>

  <target name="build-release" description="Copies the builds to the stable build directory ready for a release" unless="${nobuild}"
          depends="validate-release,
                   build-release-libs" />

  <target name="build-release-libs" description="Copy the library builds to the Stable Build directory ready for a release" unless="${nobuild}" depends="validate-release-libs,build-libs">
    <copy todir="bin/stable/Libraries/" overwrite="true">
      <fileset basedir="bin/nightlies/Libraries">
        <include name="**/*" />
      </fileset>
    </copy>
  </target>
  
  <!-- Clean Targets -->

  <target name="clean" description="Cleans the bin/ and obj/ directories of all projects causing a rebuild to be necessary"
          depends="clean-nightlies,clean-stable,
                   clean-intermediaries,
                   clean-dist,
                   clean-ndoc,
                   clean-nuget">
  </target>

  <target name="clean-nightlies" description="Cleans the nightly build directory">
    <delete failonerror="true">
      <fileset>
        <include name="bin/nightlies/**/*" />
      </fileset>
    </delete>
  </target>

  <target name="clean-stable" description="Cleans the stable build directory">
    <delete failonerror="true">
      <fileset>
        <include name="bin/stable/**/*" />
      </fileset>
    </delete>
  </target>

  <target name="clean-hg" description="Cleans the hg .orig files that may be left behind by reverted changes">
    <delete failonerror="false">
      <fileset>
        <include name="**/*.orig" />
      </fileset>
    </delete>
  </target>

  <target name="clean-intermediaries" description="Cleans the intermediary bin/ and obj/ directories of all projects">
    <delete failonerror="false">
      <fileset>
        <include name="**/bin/**/*" />
        <include name="**/obj/**/*" />
      </fileset>
    </delete>
  </target>

  <target name="clean-dist" description="Cleans the distibution zip files">
    <delete failonerror="false">
      <fileset>
        <include name="dotNetRDF*.zip" />
      </fileset>
    </delete>
  </target>

  <target name="clean-ndoc" description="Cleans the NDoc working directory">
    <delete failonerror="false">
      <fileset>
        <include name="Build/ndoc3/docs/*" />
      </fileset>
    </delete>
  </target>

  <target name="clean-nuget" description="Cleans the NuGet working directories">
   <delete failonerror="false">
     <fileset>
       <include name="Build/nuget/**/lib/" />
       <include name="Build/nuget/**/src/" />
       <include name="Build/nuget/**/*.nupkg" />
     </fileset>
   </delete>
  </target>
  
  <!-- Dist Targets for creating the distribution ZIP Files -->

  <target name="no-dist" description="Sets that no distributions should be built" depends="no-build">
    <property name="nodist" value="true" />
  </target>

  <target name="dist" description="Creates the Distribution ZIP Files" unless="${nodist}"
          depends="dist-libs-stable,
                   dist-libs-nuget">
    
  </target>

  <target name="dist-libs-stable" description="Creates the ZIP files for the stable API Release" depends="build-release-libs" unless="${nodist}">
    <zip zipfile="${libzip}" ziplevel="9">
      <fileset>
        <include name="Acknowledgments.txt" />
        <include name="License.txt" />
      </fileset>
      <fileset basedir="Libraries">
        <include name="ReadMe.txt" />
        <include name="ReleaseNotes.txt" />
        <include name="ChangeLog.txt" />
      </fileset>
      <fileset basedir="bin/stable/Libraries/" failonempty="true">
        <include name="**/*" />
      </fileset>
    </zip>
    <zip zipfile="${srczip}" ziplevel="9">
      <fileset failonempty="true">
        <include name="**/*" />
        <exclude name=".hg/" />
        <exclude name="**/bin/**/*" />
        <exclude name="**/obj/**/*" />
        <exclude name="**/*.dll" />
        <exclude name="**/*.exe" />
        <exclude name="**/*.pdb" />
        <exclude name="Testing/" />
        <exclude name="TestResults/" />
        <exclude name="Samples/" />
        <exclude name="*.zip" />
        <exclude name="Utilities/bsbm/" />
        <exclude name="Build/ndoc3/docs/" />
        <exclude name="Build/NuGet/*/lib/**/*" />
        <exclude name="packages/" />
      </fileset>
    </zip>
  </target>

  <target name="dist-libs-nuget" description="Creates the NuGet packages" unless="${nodist}" 
          depends="dist-libs-nuget-core,
                   dist-libs-nuget-io-core,
                   dist-libs-nuget-io-json">
  </target>
  
  <property name="nuget.product" value="Core" />
  <property name="nuget.artifacts" value="dotNetRDF.*" />
  <property name="nuget.profile" value="Debug" />
  <property name="nuget.nuspec" value="" />

  <target name="nuget-worker">
    <!-- Copy libraries -->
    <copy todir="Build/nuget/${nuget.product}/lib/">
      <fileset basedir="bin/stable/Libraries/${nuget.product}/" failonempty="true" >
        <include name="**/${nuget.artifacts}" />
      </fileset>
    </copy>
    <!-- Copy source if including symbols -->
    <copy todir="Build/nuget/${nuget.product}/src/" unless="${nosymbols}">
      <fileset basedir="Libraries/${nuget.product}/net40/" failonempty="true">
        <include name="**/*.cs" />
      </fileset>
    </copy>
    <!-- Finally invoke nuget on the package -->
    <exec workingdir="Build/nuget/${nuget.product}/" program="nuget.exe">
      <arg value="pack" />
      <arg value="${nuget.nuspec}.nuspec" />
      <arg value="-Symbols" unless="${nosymbols}" />
      <arg value="-Verbosity" />
      <arg value="detailed" />
      <arg value="-Version" />
      <arg value="${nuspecversion}" />
    </exec>
  </target>
  
  <target name="dist-libs-nuget-core" description="Creates the Core Library NuGet package" depends="build-release-libs, do-dist-libs-nuget-core" unless="${nodist}">
  </target>

  <target name="do-dist-libs-nuget-core" description="Creates the Core Library NuGet package (no dependency)" depends="clean-nuget" unless="${nodist}">
    <property name="nuget.product" value="Core" />
    <property name="nuget.artifacts" value="dotNetRDF.*" />
    <property name="nuget.nuspec" value="dotNetRDF.Core" />
    <call target="nuget-worker" />
  </target>

  <target name="dist-libs-nuget-io-core" description="Creates the IO Core Library NuGet package" depends="build-release-libs, do-dist-libs-nuget-io-core" unless="${nodist}">
  </target>

  <target name="do-dist-libs-nuget-io-core" description="Creates the IO Core Library NuGet package (no dependency)" depends="clean-nuget" unless="${nodist}">
    <property name="nuget.product" value="IO/Core" />
    <property name="nuget.artifacts" value="dotNetRDF.IO.Core.*" />
    <property name="nuget.nuspec" value="dotNetRDF.IO.Core" />
    <call target="nuget-worker" />
  </target>

  <target name="dist-libs-nuget-io-json" description="Creates the IO JSON Library NuGet package" depends="build-release-libs, do-dist-libs-nuget-io-json" unless="${nodist}">
  </target>

  <target name="do-dist-libs-nuget-io-json" description="Creates the IO JSON Library NuGet package (no dependency)" depends="clean-nuget" unless="${nodist}">
    <property name="nuget.product" value="IO/Json" />
    <property name="nuget.artifacts" value="dotNetRDF.IO.Json.*" />
    <property name="nuget.nuspec" value="dotNetRDF.IO.Json" />
    <call target="nuget-worker" />
  </target>
  
  <!-- Upload Targets for Uploading the Builds to a website and Publishing NuGet Packages -->

  <target name="upload" description="Uploads ZIPs to a Website and publish NuGet packages"
          depends="upload-libs-nuget">
  </target>

  <target name="upload-libs-nuget" description="Uploads the NuGet Packages to the NuGet Gallery" 
          depends="upload-libs-nuget-core">
  </target>

  <target name="upload-libs-nuget-core" description="Uploads the Core Library Package to the NuGet Gallery" depends="dist-libs-nuget-core">
    <exec workingdir="Build/nuget/Core/" program="nuget.exe">
      <arg value="push" />
      <arg value="dotNetRDF.${nuspecversion}.nupkg" />
      <arg value="-Verbosity" />
      <arg value="detailed" />
    </exec>
  </target>

</project>